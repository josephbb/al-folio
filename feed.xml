<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://joebakcoleman.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://joebakcoleman.com/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-06-05T15:47:42+00:00</updated><id>https://joebakcoleman.com/feed.xml</id><title type="html">blank</title><subtitle>Collective behavior from fish to fascists.
</subtitle><entry><title type="html">Retire the P-Curve (On Twitter)</title><link href="https://joebakcoleman.com/blog/2023/pcurve/" rel="alternate" type="text/html" title="Retire the P-Curve (On Twitter)" /><published>2023-03-10T13:12:00+00:00</published><updated>2023-03-10T13:12:00+00:00</updated><id>https://joebakcoleman.com/blog/2023/pcurve</id><content type="html" xml:base="https://joebakcoleman.com/blog/2023/pcurve/"><![CDATA[<h1 id="the-p-curves-bold-claims">The P-Curve’s bold claims</h1>
<p>In science, there is a common concern that large swaths of the published literature are simply “wrong”. Although these concerns have been around a long time, they have become a centerpiece of scientific discourse over the past 15 years. Rationales for these concerns are wide ranging, but generally center on the overabundance of statistically significant findings in the literature. Typically, this is chalked up to some combination of the file-drawer problem (most research going unpublished) or Questionable Research Practices—encompassing a wide range of behaviors that might convert a non-significant finding into a significant one.  Scientists find themselves staring at the literature, trying to discern where the baby ends and the bathwater begins. What do we throw out? What do we keep? How can we trust that new results are not P-Hacked?</p>

<p>Enter the P-curve.</p>

<p>Developed in 2013<sup>1</sup>, P-Curves have been the stickiest among a family of meta-analytic tools designed to confront selection bias going back 40 years <sup>2</sup>. Their logic is fairly straightforward, for a given (and fixed) power, the distribution of p-values takes on a characteristic shape. If power is sufficiently high, this distribution will be skewed such that smaller p-values are more common than those close to .05. Without loss of generality, we can calculate a p-curve for the simplest possible case—a one sample Z-Test.</p>

<p><img src="/assets/img/pcurveblog_fig1.png" alt="alt text" title="Title" width="750" />
<em>P-Curves calculated assuming a 1-sample Z-test at various levels of power.</em></p>

<p>Note that as power increases to 90%, the probability of getting a p-value between .01 and .05 drops to less than 20%. For 62% power, the chance of getting a p-value between .025 and .05 is only 8%. Armed with this model, what might we conclude if a study on two effects reports p values of .027 and .039 with 62% average power? The probability of this occurring under the p-curve model is less than 1%.</p>

<h3 id="p-curve-polygraph-and-baton-and-of-the-stats-cop">P-Curve: Polygraph and Baton and of the stats cop</h3>
<p>This feature of p-curves has become the polygraph and baton of self-styled stats cops on Twitter. They argue that an abundance of p-values nearer to .05 cannot be explained by chance and therefore constitutes evidence of p-hacking. Every few months, some study gets a bit of news attention. This corner of Twitter circles the p-values, notes how many are near .05, and then a pile on begins.</p>

<p><img src="/assets/img/Ritchie.png" alt="alt text" title="Title" width="750" />
<em>Informal application of the p-curve to assert p-hacking in a study on cold exposure</em></p>

<p>Of course, there is little doubt that published studies will often require debunking or benefit from critique, and the cold exposure study had its share of issues. However, far too often, this dynamic emerges as a consequence of an early career researcher’s work that found its way into a viral news story. If the researcher followed open-science principles, their data and code are downloaded by dozens of sleuths that effectively reverse p-hack the data into non-significance then hold it up alongside the p-curve as evidence of p-hacking. As you might expect, this does not make open science a <strong><a href="https://www.bps.org.uk/psychologist/bropenscience-broken-science">particularly welcoming place</a></strong>.</p>

<p>What makes these p-curve critiques distinct from something like discussing potential confounds or the appropriateness of statistical tests, is that they carry with them judgement of either the researcher’s abilities or moral standing. They necessarily insinuate that a researcher either does not understand that you can’t engage in QRPs, or has done so knowingly in an attempt to mislead the scientific community for personal gain. These are hefty allegations, and they’re gonna need solid evidence. Does the P-curve give us that?</p>

<h3 id="p-curve-p-hacking-to-detect-p-hacking">P-Curve: P-Hacking to detect P-Hacking</h3>
<p>As initially conceived and often implemented, these p-curve type methods are to be used on chunks of the scientific literature specified <strong>a priori</strong>. This has its own issues and caveats, which are discussed  <strong><a href="https://statmodeling.stat.columbia.edu/2018/02/26/p-curve-p-uniform-hedges-1984-methods-meta-analysis-selection-bias-exchange-blake-mcshane-uri-simosohn/">this excellent post</a></strong>. However, advocates of the p-curve have taken this a step farther, suggesting it should be used to evaluate <strong><a href="http://daniellakens.blogspot.com/2014/05/the-probability-of-p-values-as-function.html">individual studies</a></strong>. Even for studies reporting only a pair of results, journal editors are encouraged to seek explanation from authors with “unlikely” patterns of p-values… or force them to run additional experiments. Lakens <strong><a href="https://daniellakens.blogspot.com/2015/05/after-how-many-p-values-between-0025.html">writes</a></strong>:</p>

<blockquote>
  <p>What should you do as an editor when you encounter a set of studies with p-values that are relatively unlikely to occur? First, you can ask the authors to discuss the situation. For example, when you explicitly mention the set of studies becomes more probable when a non-significant finding is added, the authors might be happy to oblige. Second, one of my favorite solutions is to decide upon an in principle acceptance (assuming the article is fit for publication), but ask the authors to add one replication. The authors are guaranteed of publication irrespective of the outcome of the replication, but we have a better knowledge of what is likely to be true.</p>
</blockquote>

<p>Perhaps this sounds good in principle, but consider it in practice: A twitter data-sleuth sees a news story making the rounds, and decides to examine the paper. They notice the reported significant p-values between .025 and .05, calculate the probability that would have occurred by chance, and find that it is low. Excitedly, they post to Twitter that the surprising, news-worth headline is probably p-hacked. Clout rains down.</p>

<p>Of course, they wouldn’t have calculated this quantity had the p-values been smaller. The decision to run the analysis depended on the data, such that they <em>engaged in p-hacking to detect p-hacking</em>. This could be made worse, as there are plenty of researcher degrees of freedom in estimating probability from a p-curve. At the end of the day, it’s no different than seeing a trend in a scatter plot and finding a regression line yields significance.</p>

<p>Alternatively, the researcher might argue that they apply the test to every paper they encounter. I seriously doubt this is the case for anyone (who has the time?), but this is just data-dredging the published literature for evidence of p-hacking. Unless they tweet every time someone’s paper has plausible p-values, they’re cherry picking the instances in which the test indicates p-hacking. It’s no different than a scientist who claims they can avoid p-hacking by testing every possible relationship and reporting those that are significant.</p>

<p>Worse, they often double down–pulling the data and considering alternative analyses that would have produced non-significance. All of this occurring is conditioned on the data itself, such that the a fair chunk of this sleuthing winds up engaging in the very thing it seeks to eradicate. In practice, applications of the p-curve—particularly on Twitter—are simply <em>p-hacking to prove p-hacking</em>. The shoemaker’s children go shoeless.</p>

<h3 id="a-model-like-any-other">A model like any other</h3>
<p>At it’s core, the p-curve is a model, and inferences drawn from it are only as good as the model assumptions. One of its core assumptions is that the p-values are independent. This is rarely the case within a single paper, as often the reported effects are on the same phenomenon measured in a a similar way from a similar population. This increases the probability that effect and sample sizes are in the same neighborhood, as well as the p-values they generate.</p>

<p>It likewise assumes that all experiments would have been conducted, regardless of the outcomes of of previous experiments. This too is rarely the case, as findings guide additional research. As Richard Morey <strong><a href="https://www.youtube.com/watch?v=c0G98qp1cf4">pointed out</a></strong>, this is a non-trivial distinction with profound consequences for how we interpret findings after the fact.</p>

<p>P-Curves further require that effects are not heterogenous, and that null effects are precisely zero such that they don’t bleed into the p-curve at a rate higher than expected by chance. With discrete outcomes, p-values can only take on finite values, deviating from the smooth p-curve. Violating any of these assumptions, and especially many of them, renders inferences drawn from a p-curve analysis unreliable.</p>

<h3 id="what-p-curves-miss">What P-Curves miss</h3>

<p>Even if a p-curve’s assumptions are met, and the data have plenty of tiny p-values, that provides no evidence the inferences drawn are correct or free from p-hacking. Consider a situation in which a researcher knowingly includes a confound that produces a strong effect. This is a QRP if ever there were one, yet a P-Curve analysis would have us convinced the paper contains evidence with no indication of p-hacking. In a sense it does, but only that the confound is indeed a confound.</p>

<p>This could also happen inadvertently, if a researcher simply selects an inappropriate model for their data. Perhaps the strong effect is simply violating assumptions of equality of variance, or normality. Maybe their model is a bit overfit, or there’s post-treatment bias. Perhaps the model is perfectly fine, but the inferences drawn from it are incorrect given the nature of the data.</p>

<p>It’s unfair to assume p-curves, or any tool, should be able to tell us all of these things. Sorting out if a paper provides useful evidence requires a deep understanding of the inference methods, the data collection process, and the domain knowledge that converts the numbers and maths into something we can understand and care about. But this is precisely the point—we shouldn’t expect to be able to pass any and all papers through a statistical tool and determine much of anything about its value.</p>

<p>By imbuing the p-curve with special and unquestioned power to discern fact from fiction, we’ve created a tool that can be weaponized to push junk science. Consider a recent meta analysis<sup>4</sup> which leveraged the p-curve as evidence of pre-cognition. Just as Twitter sleuths can p-hack the p-curve to dunk on a paper for internet points, people trying to push scientific disinformation can do the same to demonstrate the validity of their claims.</p>

<h1 id="the-take-home">The take-home</h1>
<p>Scientists, pressed for time, too often treat statistical models as oracles that feast on data and yield answers to life’s deepest questions. The reality is that models are quite simple things, which have little to no clue what we want to know and yield an answer regardless. They’re a bit like a less chatty chatGPT. Only if we understand their strengths and limitations can we apply them in a way that will yield useful inference.</p>

<p>Statisticians have yelled themselves hoarse over the paste decade, encouraging scientists to understand what their models can and can’t do, and what their output can and can’t tell us. Scientists, however, have gone a different route—on a crusade against QRPs with much less concern over whether a QRP-free paper yields valid inference. In this quest, the P-Curve has become yet another oracle that we assume can force a distribution of p-values to confess if they were p-hacked.</p>

<p>When a paper differs from the expected distribution, it only tells us that—not why. It could be that the assumptions don’t hold, bad luck on the authors part, null findings stuck in peer review, p-hacking, or just that the rest of the results are somewhere else in the paper. Even when the data match expectations, there’s no guarantee the inferences in the paper are correct. Expecting the p-curve to be the one statistical test that we can uncritically apply to  any dataset is madness. There’s no easy substitute for engaging deeply with a papers methods, data, and conclusions.</p>

<p>The P-curve, for whatever value it may hold, is used on social media in the precisely way we’re all taught not to use statistics. Stats cops read paper after paper, and when the p-values in one look suspicious—they form a hypothesis that it was due to p-hacking. When they run a p-curve, sure enough, the data supports their hypothesis. It’s data dredging, cherry-picking, and HARKing all in one. Worse, their hypothesis leads to the conclusion that they can publicly humiliate the author for their transgression. This isn’t constructive criticism, nor is it effective evaluation of the merits of a paper. It’s just cyberbullying.</p>

<h2 id="references">References</h2>

<ol>
  <li>
    <div class="csl-entry">Simonsohn, U., Nelson, L. D., &#38; Simmons, J. P. (2014). P-curve: a key to the file-drawer. <i>Journal of Experimental Psychology. General</i>, <i>143</i>(2), 534–547. https://doi.org/10.1037/A0033242</div>
  </li>
  <li>
    <div class="csl-entry">Hedges, L. v. (1984). Estimation of Effect Size under Nonrandom Sampling: The Effects of Censoring Studies Yielding Statistically Insignificant Mean Differences. <i>Journal of Educational Statistics</i>, <i>9</i>(1), 61. https://doi.org/10.2307/1164832</div>
  </li>
  <li>
    <div class="csl-entry">Bem, D., Tressoldi, P., Rabeyron, T., &#38; Duggan, M. (2015). Feeling the future: A meta-analysis of 90 experiments on the anomalous anticipation of random future events. <i>F1000Research</i>, <i>4</i>. https://doi.org/10.12688/F1000RESEARCH.7177.2</div>
  </li>
</ol>]]></content><author><name></name></author><category term="statistics" /><category term="stats" /><category term="pcurve" /><category term="twitter" /><summary type="html"><![CDATA[It's past time to stop circling P-values]]></summary></entry><entry><title type="html">a post with giscus comments</title><link href="https://joebakcoleman.com/blog/2022/giscus-comments/" rel="alternate" type="text/html" title="a post with giscus comments" /><published>2022-12-10T15:59:00+00:00</published><updated>2022-12-10T15:59:00+00:00</updated><id>https://joebakcoleman.com/blog/2022/giscus-comments</id><content type="html" xml:base="https://joebakcoleman.com/blog/2022/giscus-comments/"><![CDATA[<p>This post shows how to add GISCUS comments.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="external-services" /><summary type="html"><![CDATA[an example of a blog post with giscus comments]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://joebakcoleman.com/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog" /><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://joebakcoleman.com/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://joebakcoleman.com/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">a post with disqus comments</title><link href="https://joebakcoleman.com/blog/2015/disqus-comments/" rel="alternate" type="text/html" title="a post with disqus comments" /><published>2015-10-20T15:59:00+00:00</published><updated>2015-10-20T15:59:00+00:00</updated><id>https://joebakcoleman.com/blog/2015/disqus-comments</id><content type="html" xml:base="https://joebakcoleman.com/blog/2015/disqus-comments/"><![CDATA[<p>This post shows how to add DISQUS comments.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="external-services" /><summary type="html"><![CDATA[an example of a blog post with disqus comments]]></summary></entry><entry><title type="html">a post with math</title><link href="https://joebakcoleman.com/blog/2015/math/" rel="alternate" type="text/html" title="a post with math" /><published>2015-10-20T15:12:00+00:00</published><updated>2015-10-20T15:12:00+00:00</updated><id>https://joebakcoleman.com/blog/2015/math</id><content type="html" xml:base="https://joebakcoleman.com/blog/2015/math/"><![CDATA[<p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p>

<p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p>

\[\sum_{k=1}^\infty |\langle x, e_k \rangle|^2 \leq \|x\|^2\]

<p>You can also use <code class="language-plaintext highlighter-rouge">\begin{equation}...\end{equation}</code> instead of <code class="language-plaintext highlighter-rouge">$$</code> for display mode math.
MathJax will automatically number equations:</p>

<p>\begin{equation}
\label{eq:cauchy-schwarz}
\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)
\end{equation}</p>

<p>and by adding <code class="language-plaintext highlighter-rouge">\label{...}</code> inside the equation environment, we can now refer to the equation using <code class="language-plaintext highlighter-rouge">\eqref</code>.</p>

<p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p>]]></content><author><name></name></author><category term="sample-posts" /><category term="formatting" /><category term="math" /><summary type="html"><![CDATA[an example of a blog post with some math]]></summary></entry><entry><title type="html">a post with code</title><link href="https://joebakcoleman.com/blog/2015/code/" rel="alternate" type="text/html" title="a post with code" /><published>2015-07-15T15:09:00+00:00</published><updated>2015-07-15T15:09:00+00:00</updated><id>https://joebakcoleman.com/blog/2015/code</id><content type="html" xml:base="https://joebakcoleman.com/blog/2015/code/"><![CDATA[<p>This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting.
It supports more than 100 languages.
This example is in C++.
All you have to do is wrap your code in markdown code tags:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">c++
</span><span class="n">code</span> <span class="n">code</span> <span class="n">code</span>
<span class="p">```</span>
</code></pre></div></div>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>By default, it does not display line numbers. If you want to display line numbers for every code block, you can set <code class="language-plaintext highlighter-rouge">kramdown.syntax_highlighter_opts.block.line_numbers</code> to true in your <code class="language-plaintext highlighter-rouge">_config.yml</code> file.</p>

<p>If you want to display line numbers for a specific code block, all you have to do is wrap your code in a liquid tag:</p>

<p>{% highlight c++ linenos %}  <br /> code code code <br /> {% endhighlight %}</p>

<p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers.
Produces something like this:</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="sample-posts" /><category term="formatting" /><category term="code" /><summary type="html"><![CDATA[an example of a blog post with some code]]></summary></entry></feed>